export class FilemakerRecord{constructor(){this.fields={};this.portalData=[];this.recordId="0";this.modId="0"}static fromJSON(json){let record=new FilemakerRecord;if(json===[]||json.fieldData===undefined||json.portalData===undefined||json.recordId===undefined||json.modId===undefined){return record}record.fields=json.fieldData;record.portalData=json.portalData;record.recordId=json.recordId;record.modId=json.modId;return record}}export default class Filemaker{constructor(url,username="",password="",database="",layout=""){this.url=url;this.username=username;this.password=password;this.database=database;this.layout=layout}withUrl(url){this.url=url;return this}withUsername(username){this.username=username;return this}withPassword(password){this.password=password;return this}withDatabase(database){this.database=database;return this}withLayout(layout){this.layout=layout;return this}async getActiveSessions(){const headers=new Headers;headers.set("Accept","application/json");try{const response=await fetch(`${this.url}/auth/active`,{headers:headers});return await response.json()}catch(e){console.error(e)}throw new Error("Failed to fetch active users")}async search(query){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/search?query=${encodeURIComponent(query)}`,{headers:headers});let json=await response.json();let records=[];for(let record of json){records.push(FilemakerRecord.fromJSON(record))}return records}catch(e){console.error(e);throw new Error("Failed to search for records")}}async getDatabases(){if(this.username===""&&this.password===""){throw new Error("Required fields are not set. Please set the username and password before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases`,{headers:headers});return Array.from(await response.json())}catch(e){console.error(e);throw new Error("Failed to fetch databases")}}async getLayouts(){if(this.username===""&&this.password===""&&this.database===""){throw new Error("Required fields are not set. Please set the username, password and database before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts`,{headers:headers});return Array.from(await response.json())}catch(e){console.error(e);throw new Error("Failed to fetch layouts")}}async getRecords(limit=10,offset=0){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/records?limit=${limit}&offset=${offset}`,{headers:headers});let json=await response.json();let records=[];for(let record of json){records.push(FilemakerRecord.fromJSON(record))}return records}catch(e){console.error(e);throw new Error("Failed to fetch records")}}async getRecord(id){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/records/${id}`,{headers:headers});let json=await response.json();return FilemakerRecord.fromJSON(json)}catch(e){console.error(e);throw new Error("Failed to fetch records")}}async getRows(){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/fields`,{headers:headers});let json=await response.json();return Array.from(json)}catch(e){console.error(e);throw new Error("Failed to fetch records")}}async updateRecord(id,record,addIfMissing=false){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("Content-Type","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/records/${id}?force-add=${addIfMissing}`,{method:"POST",headers:headers,body:JSON.stringify(record)});let json=await response.json();return FilemakerRecord.fromJSON(json)}catch(e){console.error(e);throw new Error("Failed to update record")}}async deleteRecord(id){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/records/${id}`,{method:"DELETE",headers:headers})}catch(e){console.error(e);throw new Error("Failed to delete record")}}async deleteAllRecords(){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/records`,{method:"DELETE",headers:headers})}catch(e){console.error(e);throw new Error("Failed to delete records")}}async addRecord(record){if(this.username===""&&this.password===""&&this.database===""&&this.layout===""){throw new Error("Required fields are not set. Please set the username, password, database, and layout before making a request.")}const headers=new Headers;headers.set("Accept","application/json");headers.set("Content-Type","application/json");headers.set("X-Authentication-Options",JSON.stringify({username:this.username,password:this.password}));try{const response=await fetch(`${this.url}/databases/${this.database}/layouts/${this.layout}/records`,{method:"POST",headers:headers,body:JSON.stringify(record)});let json=await response.json();return FilemakerRecord.fromJSON(json)}catch(e){console.error(e);throw new Error("Failed to add record")}}}